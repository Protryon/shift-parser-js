"use strict";

/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ErrorMessages = exports.ErrorMessages = {
  UNEXPECTED_TOKEN: "Unexpected token {0}",
  UNEXPECTED_ILLEGAL_TOKEN: "Unexpected token ILLEGAL",
  UNEXPECTED_NUMBER: "Unexpected number",
  UNEXPECTED_STRING: "Unexpected string",
  UNEXPECTED_IDENTIFIER: "Unexpected identifier",
  UNEXPECTED_RESERVED_WORD: "Unexpected reserved word",
  UNEXPECTED_EOS: "Unexpected end of input",
  UNEXPECTED_LINE_TERMINATOR: "Unexpected line terminator",
  NEWLINE_AFTER_THROW: "Illegal newline after throw",
  INVALID_REGULAR_EXPRESSION: "Invalid regular expression",
  UNTERMINATED_REG_EXP: "Invalid regular expression: missing /",
  INVALID_LHS_IN_ASSIGNMENT: "Invalid left-hand side in assignment",
  INVALID_LHS_IN_FOR_IN: "Invalid left-hand side in for-in",
  MULTIPLE_DEFAULTS_IN_SWITCH: "More than one default clause in switch statement",
  NO_CATCH_OR_FINALLY: "Missing catch or finally after try",
  UNKNOWN_LABEL: "Undefined label '{0}'",
  LABEL_REDECLARATION: "Label '{0}' has already been declared",
  ILLEGAL_CONTINUE: "Illegal continue statement",
  ILLEGAL_BREAK: "Illegal break statement",
  ILLEGAL_RETURN: "Illegal return statement",
  STRICT_MODE_WITH: "Strict mode code may not include a with statement",
  STRICT_CATCH_VARIABLE: "Catch variable may not be eval or arguments in strict mode",
  STRICT_VAR_NAME: "Variable name may not be eval or arguments in strict mode",
  STRICT_PARAM_NAME: "Parameter name eval or arguments is not allowed in strict mode",
  STRICT_PARAM_DUPE: "Strict mode function may not have duplicate parameter names",
  STRICT_FUNCTION_NAME: "Function name may not be eval or arguments in strict mode",
  STRICT_OCTAL_LITERAL: "Octal literals are not allowed in strict mode.",
  STRICT_DELETE: "Delete of an unqualified identifier in strict mode.",
  DUPLICATE_PROTO_PROPERTY: "Duplicate __proto__ property in object literal not allowed",
  DUPLICATE_BINDING: "Duplicate binding '{0}'",
  LEXICALLY_BOUND_LET: "Invalid lexical binding name 'let'",
  ACCESSOR_DATA_PROPERTY: "Object literal may not have data and accessor property with the same name",
  ACCESSOR_GET_SET: "Object literal may not have multiple get/set accessors with the same name",
  STRICT_LHS_ASSIGNMENT: "Assignment to eval or arguments is not allowed in strict mode",
  STRICT_LHS_POSTFIX: "Postfix increment/decrement may not have eval or arguments operand in strict mode",
  STRICT_LHS_PREFIX: "Prefix increment/decrement may not have eval or arguments operand in strict mode",
  STRICT_RESERVED_WORD: "Use of future reserved word in strict mode",
  ILLEGAL_ARROW_FUNCTION_PARAMS: "Illegal arrow function parameter list",
  INVALID_VAR_INIT_FOR_IN: "Invalid variable declaration in for-in statement",
  INVALID_VAR_INIT_FOR_OF: "Invalid variable declaration in for-of statement",
  UNEXPECTED_SUPER_CALL: "Unexpected super call",
  UNEXPECTED_SUPER_PROPERTY: "Unexpected super property",
  IMPORT_DUPE: "Duplicate imported names in import declaration",
  UNEXPECTED_NEW_TARGET: "Unexpected new . target",
  DUPLICATE_EXPORTED_NAME: "Duplicate export of '{0}'",
  MODULE_EXPORT_UNDEFINED: "Export '{0}' is not defined in module",
  DUPLICATE_CATCH_BINDING: "Catch parameter '{0}' redeclared as var in for-of loop" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lcnJvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JPLElBQU0sYUFBYSxXQUFiLGFBQWEsR0FBRztBQUMzQixrQkFBZ0IsRUFBRSxzQkFBc0I7QUFDeEMsMEJBQXdCLEVBQUUsMEJBQTBCO0FBQ3BELG1CQUFpQixFQUFFLG1CQUFtQjtBQUN0QyxtQkFBaUIsRUFBRSxtQkFBbUI7QUFDdEMsdUJBQXFCLEVBQUUsdUJBQXVCO0FBQzlDLDBCQUF3QixFQUFFLDBCQUEwQjtBQUNwRCxnQkFBYyxFQUFFLHlCQUF5QjtBQUN6Qyw0QkFBMEIsRUFBRSw0QkFBNEI7QUFDeEQscUJBQW1CLEVBQUUsNkJBQTZCO0FBQ2xELDRCQUEwQixFQUFFLDRCQUE0QjtBQUN4RCxzQkFBb0IsRUFBRSx1Q0FBdUM7QUFDN0QsMkJBQXlCLEVBQUUsc0NBQXNDO0FBQ2pFLHVCQUFxQixFQUFFLGtDQUFrQztBQUN6RCw2QkFBMkIsRUFBRSxrREFBa0Q7QUFDL0UscUJBQW1CLEVBQUUsb0NBQW9DO0FBQ3pELGVBQWEsRUFBRSx1QkFBdUI7QUFDdEMscUJBQW1CLEVBQUUsdUNBQXVDO0FBQzVELGtCQUFnQixFQUFFLDRCQUE0QjtBQUM5QyxlQUFhLEVBQUUseUJBQXlCO0FBQ3hDLGdCQUFjLEVBQUUsMEJBQTBCO0FBQzFDLGtCQUFnQixFQUFFLG1EQUFtRDtBQUNyRSx1QkFBcUIsRUFBRSw0REFBNEQ7QUFDbkYsaUJBQWUsRUFBRSwyREFBMkQ7QUFDNUUsbUJBQWlCLEVBQUUsZ0VBQWdFO0FBQ25GLG1CQUFpQixFQUFFLDZEQUE2RDtBQUNoRixzQkFBb0IsRUFBRSwyREFBMkQ7QUFDakYsc0JBQW9CLEVBQUUsZ0RBQWdEO0FBQ3RFLGVBQWEsRUFBRSxxREFBcUQ7QUFDcEUsMEJBQXdCLEVBQUUsNERBQTREO0FBQ3RGLG1CQUFpQixFQUFFLHlCQUF5QjtBQUM1QyxxQkFBbUIsRUFBRSxvQ0FBb0M7QUFDekQsd0JBQXNCLEVBQUUsMkVBQTJFO0FBQ25HLGtCQUFnQixFQUFFLDJFQUEyRTtBQUM3Rix1QkFBcUIsRUFBRSwrREFBK0Q7QUFDdEYsb0JBQWtCLEVBQUUsbUZBQW1GO0FBQ3ZHLG1CQUFpQixFQUFFLGtGQUFrRjtBQUNyRyxzQkFBb0IsRUFBRSw0Q0FBNEM7QUFDbEUsK0JBQTZCLEVBQUUsdUNBQXVDO0FBQ3RFLHlCQUF1QixFQUFFLGtEQUFrRDtBQUMzRSx5QkFBdUIsRUFBRSxrREFBa0Q7QUFDM0UsdUJBQXFCLEVBQUUsdUJBQXVCO0FBQzlDLDJCQUF5QixFQUFFLDJCQUEyQjtBQUN0RCxhQUFXLEVBQUUsZ0RBQWdEO0FBQzdELHVCQUFxQixFQUFFLHlCQUF5QjtBQUNoRCx5QkFBdUIsRUFBRSwyQkFBMkI7QUFDcEQseUJBQXVCLEVBQUUsdUNBQXVDO0FBQ2hFLHlCQUF1QixFQUFFLHdEQUF3RCxFQUNsRixDQUFDIiwiZmlsZSI6InNyYy9lcnJvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IFNoYXBlIFNlY3VyaXR5LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKVxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNvbnN0IEVycm9yTWVzc2FnZXMgPSB7XG4gIFVORVhQRUNURURfVE9LRU46IFwiVW5leHBlY3RlZCB0b2tlbiB7MH1cIixcbiAgVU5FWFBFQ1RFRF9JTExFR0FMX1RPS0VOOiBcIlVuZXhwZWN0ZWQgdG9rZW4gSUxMRUdBTFwiLFxuICBVTkVYUEVDVEVEX05VTUJFUjogXCJVbmV4cGVjdGVkIG51bWJlclwiLFxuICBVTkVYUEVDVEVEX1NUUklORzogXCJVbmV4cGVjdGVkIHN0cmluZ1wiLFxuICBVTkVYUEVDVEVEX0lERU5USUZJRVI6IFwiVW5leHBlY3RlZCBpZGVudGlmaWVyXCIsXG4gIFVORVhQRUNURURfUkVTRVJWRURfV09SRDogXCJVbmV4cGVjdGVkIHJlc2VydmVkIHdvcmRcIixcbiAgVU5FWFBFQ1RFRF9FT1M6IFwiVW5leHBlY3RlZCBlbmQgb2YgaW5wdXRcIixcbiAgVU5FWFBFQ1RFRF9MSU5FX1RFUk1JTkFUT1I6IFwiVW5leHBlY3RlZCBsaW5lIHRlcm1pbmF0b3JcIixcbiAgTkVXTElORV9BRlRFUl9USFJPVzogXCJJbGxlZ2FsIG5ld2xpbmUgYWZ0ZXIgdGhyb3dcIixcbiAgSU5WQUxJRF9SRUdVTEFSX0VYUFJFU1NJT046IFwiSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb25cIixcbiAgVU5URVJNSU5BVEVEX1JFR19FWFA6IFwiSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb246IG1pc3NpbmcgL1wiLFxuICBJTlZBTElEX0xIU19JTl9BU1NJR05NRU5UOiBcIkludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gYXNzaWdubWVudFwiLFxuICBJTlZBTElEX0xIU19JTl9GT1JfSU46IFwiSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiBmb3ItaW5cIixcbiAgTVVMVElQTEVfREVGQVVMVFNfSU5fU1dJVENIOiBcIk1vcmUgdGhhbiBvbmUgZGVmYXVsdCBjbGF1c2UgaW4gc3dpdGNoIHN0YXRlbWVudFwiLFxuICBOT19DQVRDSF9PUl9GSU5BTExZOiBcIk1pc3NpbmcgY2F0Y2ggb3IgZmluYWxseSBhZnRlciB0cnlcIixcbiAgVU5LTk9XTl9MQUJFTDogXCJVbmRlZmluZWQgbGFiZWwgJ3swfSdcIixcbiAgTEFCRUxfUkVERUNMQVJBVElPTjogXCJMYWJlbCAnezB9JyBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkXCIsXG4gIElMTEVHQUxfQ09OVElOVUU6IFwiSWxsZWdhbCBjb250aW51ZSBzdGF0ZW1lbnRcIixcbiAgSUxMRUdBTF9CUkVBSzogXCJJbGxlZ2FsIGJyZWFrIHN0YXRlbWVudFwiLFxuICBJTExFR0FMX1JFVFVSTjogXCJJbGxlZ2FsIHJldHVybiBzdGF0ZW1lbnRcIixcbiAgU1RSSUNUX01PREVfV0lUSDogXCJTdHJpY3QgbW9kZSBjb2RlIG1heSBub3QgaW5jbHVkZSBhIHdpdGggc3RhdGVtZW50XCIsXG4gIFNUUklDVF9DQVRDSF9WQVJJQUJMRTogXCJDYXRjaCB2YXJpYWJsZSBtYXkgbm90IGJlIGV2YWwgb3IgYXJndW1lbnRzIGluIHN0cmljdCBtb2RlXCIsXG4gIFNUUklDVF9WQVJfTkFNRTogXCJWYXJpYWJsZSBuYW1lIG1heSBub3QgYmUgZXZhbCBvciBhcmd1bWVudHMgaW4gc3RyaWN0IG1vZGVcIixcbiAgU1RSSUNUX1BBUkFNX05BTUU6IFwiUGFyYW1ldGVyIG5hbWUgZXZhbCBvciBhcmd1bWVudHMgaXMgbm90IGFsbG93ZWQgaW4gc3RyaWN0IG1vZGVcIixcbiAgU1RSSUNUX1BBUkFNX0RVUEU6IFwiU3RyaWN0IG1vZGUgZnVuY3Rpb24gbWF5IG5vdCBoYXZlIGR1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZXNcIixcbiAgU1RSSUNUX0ZVTkNUSU9OX05BTUU6IFwiRnVuY3Rpb24gbmFtZSBtYXkgbm90IGJlIGV2YWwgb3IgYXJndW1lbnRzIGluIHN0cmljdCBtb2RlXCIsXG4gIFNUUklDVF9PQ1RBTF9MSVRFUkFMOiBcIk9jdGFsIGxpdGVyYWxzIGFyZSBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZS5cIixcbiAgU1RSSUNUX0RFTEVURTogXCJEZWxldGUgb2YgYW4gdW5xdWFsaWZpZWQgaWRlbnRpZmllciBpbiBzdHJpY3QgbW9kZS5cIixcbiAgRFVQTElDQVRFX1BST1RPX1BST1BFUlRZOiBcIkR1cGxpY2F0ZSBfX3Byb3RvX18gcHJvcGVydHkgaW4gb2JqZWN0IGxpdGVyYWwgbm90IGFsbG93ZWRcIixcbiAgRFVQTElDQVRFX0JJTkRJTkc6IFwiRHVwbGljYXRlIGJpbmRpbmcgJ3swfSdcIixcbiAgTEVYSUNBTExZX0JPVU5EX0xFVDogXCJJbnZhbGlkIGxleGljYWwgYmluZGluZyBuYW1lICdsZXQnXCIsXG4gIEFDQ0VTU09SX0RBVEFfUFJPUEVSVFk6IFwiT2JqZWN0IGxpdGVyYWwgbWF5IG5vdCBoYXZlIGRhdGEgYW5kIGFjY2Vzc29yIHByb3BlcnR5IHdpdGggdGhlIHNhbWUgbmFtZVwiLFxuICBBQ0NFU1NPUl9HRVRfU0VUOiBcIk9iamVjdCBsaXRlcmFsIG1heSBub3QgaGF2ZSBtdWx0aXBsZSBnZXQvc2V0IGFjY2Vzc29ycyB3aXRoIHRoZSBzYW1lIG5hbWVcIixcbiAgU1RSSUNUX0xIU19BU1NJR05NRU5UOiBcIkFzc2lnbm1lbnQgdG8gZXZhbCBvciBhcmd1bWVudHMgaXMgbm90IGFsbG93ZWQgaW4gc3RyaWN0IG1vZGVcIixcbiAgU1RSSUNUX0xIU19QT1NURklYOiBcIlBvc3RmaXggaW5jcmVtZW50L2RlY3JlbWVudCBtYXkgbm90IGhhdmUgZXZhbCBvciBhcmd1bWVudHMgb3BlcmFuZCBpbiBzdHJpY3QgbW9kZVwiLFxuICBTVFJJQ1RfTEhTX1BSRUZJWDogXCJQcmVmaXggaW5jcmVtZW50L2RlY3JlbWVudCBtYXkgbm90IGhhdmUgZXZhbCBvciBhcmd1bWVudHMgb3BlcmFuZCBpbiBzdHJpY3QgbW9kZVwiLFxuICBTVFJJQ1RfUkVTRVJWRURfV09SRDogXCJVc2Ugb2YgZnV0dXJlIHJlc2VydmVkIHdvcmQgaW4gc3RyaWN0IG1vZGVcIixcbiAgSUxMRUdBTF9BUlJPV19GVU5DVElPTl9QQVJBTVM6IFwiSWxsZWdhbCBhcnJvdyBmdW5jdGlvbiBwYXJhbWV0ZXIgbGlzdFwiLFxuICBJTlZBTElEX1ZBUl9JTklUX0ZPUl9JTjogXCJJbnZhbGlkIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIGZvci1pbiBzdGF0ZW1lbnRcIixcbiAgSU5WQUxJRF9WQVJfSU5JVF9GT1JfT0Y6IFwiSW52YWxpZCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBpbiBmb3Itb2Ygc3RhdGVtZW50XCIsXG4gIFVORVhQRUNURURfU1VQRVJfQ0FMTDogXCJVbmV4cGVjdGVkIHN1cGVyIGNhbGxcIixcbiAgVU5FWFBFQ1RFRF9TVVBFUl9QUk9QRVJUWTogXCJVbmV4cGVjdGVkIHN1cGVyIHByb3BlcnR5XCIsXG4gIElNUE9SVF9EVVBFOiBcIkR1cGxpY2F0ZSBpbXBvcnRlZCBuYW1lcyBpbiBpbXBvcnQgZGVjbGFyYXRpb25cIixcbiAgVU5FWFBFQ1RFRF9ORVdfVEFSR0VUOiBcIlVuZXhwZWN0ZWQgbmV3IC4gdGFyZ2V0XCIsXG4gIERVUExJQ0FURV9FWFBPUlRFRF9OQU1FOiBcIkR1cGxpY2F0ZSBleHBvcnQgb2YgJ3swfSdcIixcbiAgTU9EVUxFX0VYUE9SVF9VTkRFRklORUQ6IFwiRXhwb3J0ICd7MH0nIGlzIG5vdCBkZWZpbmVkIGluIG1vZHVsZVwiLFxuICBEVVBMSUNBVEVfQ0FUQ0hfQklORElORzogXCJDYXRjaCBwYXJhbWV0ZXIgJ3swfScgcmVkZWNsYXJlZCBhcyB2YXIgaW4gZm9yLW9mIGxvb3BcIixcbn07XG4iXX0=